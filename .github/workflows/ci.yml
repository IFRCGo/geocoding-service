name: Run test

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      push_docker_image:
        type: string  # true or false
        default: "false"
    outputs:
      docker_image_name:
        description: "Only docker image name"
        value: ${{ jobs.test.outputs.docker_image_name }}
      docker_image_tag:
        description: "Only docker image tag"
        value: ${{ jobs.test.outputs.docker_image_tag }}
      docker_image:
        description: "docker image with tag"
        value: ${{ jobs.test.outputs.docker_image }}
  pull_request:
  # NOTE: For other, they should be run through helm github action ./helm-publish.yml

env:
  DJANGO_SECRET_KEY: "ci-test-insecure-django-secret-key"
  COMPOSE_FILE: docker-compose.yml:gh-docker-compose.yml

jobs:
  test:
    name: 🚴 Test 🚴
    runs-on: ubuntu-latest
    outputs:
      docker_image_name: ${{ steps.prep.outputs.tagged_image_name }}
      docker_image_tag: ${{ steps.prep.outputs.tag }}
      docker_image: ${{ steps.prep.outputs.tagged_image }}

    steps:
      - uses: actions/checkout@main

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ inputs.push_docker_image }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Prepare Docker
        id: prep
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository }}
        run: |
          BRANCH_NAME=$(echo $GITHUB_REF_NAME | sed 's|:|-|' | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g' | cut -c1-100 | sed 's/-*$//')
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')

          # XXX: Check if there is a slash in the BRANCH_NAME eg: project/add-docker
          if [[ "$BRANCH_NAME" == *"/"* ]]; then
              # XXX: Change the docker image package to -alpha
              IMAGE_NAME="$IMAGE_NAME-alpha"
              TAG="$(echo "$BRANCH_NAME" | sed 's|/|-|g').$(echo $GITHUB_SHA | head -c7)"
          else
              TAG="$BRANCH_NAME.$(echo $GITHUB_SHA | head -c7)"
          fi

          echo "tagged_image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "tagged_image=${IMAGE_NAME}:${TAG}" >> $GITHUB_OUTPUT
          echo "push_docker_image=$PUSH_DOCKER_IMAGE"  >> $GITHUB_OUTPUT
          echo "::notice::Tagged docker image: ${IMAGE_NAME}:${TAG}"

      - name: 🐳 Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-buildx-refs/develop
            ${{ runner.os }}-buildx-

      - name: 🐳 Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          push: false
          load: true
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: 🐳 Docker push
        if: ${{ inputs.push_docker_image }}
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.prep.outputs.tagged_image }}
          push: true

      - name: 🐳 Move docker cache (🧙 Hack fix)
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  validate_helm:
    name: 🚴 Validate Helm 🚴
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: 🐳 Helm lint
        run: helm lint ./helm --values ./helm/values-test.yaml

      - name: 🐳 Helm template
        run: helm template ./helm --values ./helm/values-test.yaml